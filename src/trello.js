const { ipcRenderer } = require('electron');

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è drag-and-drop
let draggedTask = null;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function openTaskModal(columnId) {
  const modal = document.getElementById('taskModal');
  const input = document.getElementById('taskInput');
  const saveButton = document.getElementById('saveTaskButton');
  
  modal.style.display = 'block';
  input.value = '';
  input.focus();
  
  saveButton.onclick = function () {
    addTask(columnId, input.value);
    modal.style.display = 'none';
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
function addTask(columnId, taskText) {
  if (taskText && taskText.trim()) {
    const currentProject = localStorage.getItem('currentProject') || 'Untitled';
    
    ipcRenderer.invoke('save-task', currentProject, columnId, taskText)
      .then(result => {
        if (result.success) {
          const taskContainer = document.querySelector(`#${columnId} .task-container`);
          if (taskContainer) {
            const task = createTaskElement(taskText, result.task.id);
            taskContainer.appendChild(task);
          } else {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ:', columnId);
          }
        } else {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É:', result.error);
          alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      })
      .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' + err.message);
      });
  }
}

function goBackToProjects() {
  window.location.href = "index.html";
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞—á–∏
function createTaskElement(text, id) {
  const task = document.createElement('div');
  task.className = 'task';
  task.setAttribute('draggable', 'true');
  task.setAttribute('data-id', id);

  // –°–æ–∑–¥–∞–µ–º span –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
  const taskTextSpan = document.createElement('span');
  taskTextSpan.className = 'task-text';
  taskTextSpan.textContent = text;
  task.appendChild(taskTextSpan);

  // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const editButton = document.createElement('button');
  editButton.className = 'edit-button';
  editButton.textContent = '‚úèÔ∏è';
  editButton.addEventListener('click', () => {
    const currentText = taskTextSpan.textContent;
    
    // –°–æ–∑–¥–∞–µ–º input –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    const input = document.createElement('input');
    input.type = 'text';
    input.value = currentText;
    input.className = 'edit-input';
    
    // –ó–∞–º–µ–Ω—è–µ–º span –Ω–∞ input
    task.replaceChild(input, taskTextSpan);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    editButton.style.display = 'none';
    deleteButton.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
    const saveButton = document.createElement('button');
    saveButton.className = 'save-edit-button';
    saveButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    
    const cancelButton = document.createElement('button');
    cancelButton.className = 'cancel-edit-button';
    cancelButton.textContent = '–û—Ç–º–µ–Ω–∞';
    
    task.appendChild(saveButton);
    task.appendChild(cancelButton);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    saveButton.addEventListener('click', async () => {
      const newText = input.value.trim();
      if (newText && newText !== currentText) {
        const result = await ipcRenderer.invoke('edit-task', id, newText);
        if (result.success) {
          taskTextSpan.textContent = newText;
        } else {
          alert('–û—à–∏–±–∫–∞: ' + result.error);
        }
      }
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      task.replaceChild(taskTextSpan, input);
      task.removeChild(saveButton);
      task.removeChild(cancelButton);
      editButton.style.display = '';
      deleteButton.style.display = '';
    });
    
    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cancelButton.addEventListener('click', () => {
      task.replaceChild(taskTextSpan, input);
      task.removeChild(saveButton);
      task.removeChild(cancelButton);
      editButton.style.display = '';
      deleteButton.style.display = '';
    });
  });

  // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const deleteButton = document.createElement('button');
  deleteButton.className = 'delete-button';
  deleteButton.textContent = 'üóë';
  deleteButton.addEventListener('click', async () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
      await ipcRenderer.invoke('delete-task', id);
      await loadTasks();
    }
  });
  
  task.appendChild(editButton);
  task.appendChild(deleteButton);
  
  task.addEventListener('dragstart', function() {
    draggedTask = this;
    setTimeout(() => this.style.display = 'none', 0);
  });
  
  task.addEventListener('dragend', function() {
    this.style.display = 'block';
    draggedTask = null;
  });
  
  return task;
}


// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ drag-and-drop
function setupDragAndDrop() {
  document.querySelectorAll('.task-container').forEach(column => {
    column.addEventListener('dragover', e => e.preventDefault());
    column.addEventListener('dragenter', e => e.preventDefault());
    
    column.addEventListener('drop', e => {
      e.preventDefault();
      if (draggedTask) {
        column.appendChild(draggedTask);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const taskId = draggedTask.getAttribute('data-id');
        const newColumn = column.closest('.column').id;
        
        ipcRenderer.invoke('update-task-column', taskId, newColumn)
          .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏:', error);
          });
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function loadTasks() {
  try {
    const currentProject = localStorage.getItem('currentProject') || 'Untitled';
    const tasks = await ipcRenderer.invoke('load-tasks', currentProject);
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', tasks);
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    document.querySelectorAll('.task-container').forEach(container => {
      container.innerHTML = '';
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    tasks.forEach(task => {
      const taskContainer = document.querySelector(`#${task.column} .task-container`);
      if (taskContainer) {
        const taskElement = createTaskElement(task.text, task.id || task._id);
        taskContainer.appendChild(taskElement);
      } else {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏:', task.column);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
  console.log('DOM –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
  const projectTitle = document.getElementById('projectTitle');
  const currentProject = localStorage.getItem('currentProject') || 'Untitled';
  projectTitle.textContent = `Task Planning for Project: ${currentProject}`;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.column button').forEach(button => {
    button.addEventListener('click', function() {
      const columnId = this.closest('.column').id;
      console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏:', columnId);
      openTaskModal(columnId);
    });
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  await loadTasks();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å drag-and-drop
  setupDragAndDrop();
});